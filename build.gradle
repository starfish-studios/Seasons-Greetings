plugins {
	id 'idea'
	id 'java-library'
	id 'maven-publish'
	id 'net.neoforged.moddev' version '1.0.23'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
	// Specify the version of NeoForge to use.
	version = project.neo_version

	parchment {
		mappingsVersion = project.parchment_mappings_version
		minecraftVersion = project.parchment_minecraft_version
	}

	// This line is optional. Access Transformers are automatically detected
	accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

	// Default run configurations.
	// These can be tweaked, removed, or duplicated as needed.
	runs {
		client {
			client()

			// Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
			systemProperty 'neoforge.enabledGameTestNamespaces', project.archives_base_name
		}

		server {
			server()
			programArgument '--nogui'
			systemProperty 'neoforge.enabledGameTestNamespaces', project.archives_base_name
		}

		// This run config launches GameTestServer and runs all registered gametests, then exits.
		// By default, the server will crash when no gametests are provided.
		// The gametest system is also enabled by default for other run configs under the /test command.
		gameTestServer {
			type = "gameTestServer"
			systemProperty 'neoforge.enabledGameTestNamespaces', project.archives_base_name
		}

		data {
			data()

			// example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
			// gameDirectory = project.file('run-data')

			// Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
			programArguments.addAll '--mod', project.archives_base_name, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
		}

		// applies to all the run configs above
		configureEach {
			// Recommended logging data for a userdev environment
			// The markers can be added/remove as needed separated by commas.
			// "SCAN": For mods scan.
			// "REGISTRIES": For firing of registry events.
			// "REGISTRYDUMP": For getting the contents of all registries.
			systemProperty 'forge.logging.markers', 'REGISTRIES'

			// Recommended logging level for the console
			// You can set various levels here.
			// Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
			logLevel = org.slf4j.event.Level.DEBUG
		}
	}

	mods {
		"${archives_base_name}" {
			sourceSet(sourceSets.main)
		}
	}
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven {
		name = 'GeckoLib'
		url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
		content {
			includeGroupByRegex("software\\.bernie.*")
			includeGroup("com.eliotlash.mclib")
		}
	}
	maven {
		url = "https://api.modrinth.com/maven"
	}
	maven {
		url "https://maven.terraformersmc.com/"
	}
}

dependencies {
	implementation("software.bernie.geckolib:geckolib-neoforge-${minecraft_version}:${geckolib_version}")
//	modImplementation "com.terraformersmc:modmenu:${project.mod_menu_version}"
	jarJar implementation("maven.modrinth:midnightlib:${project.midnightlib_version}")


	implementation("com.eliotlash.mclib:mclib:20")
	
}

jar {
	manifest {
		attributes(["Specification-Title"     : project.archives_base_name,
					"Specification-Version"   : "1",
					"Implementation-Title"    : project.archivesBaseName,
					"Implementation-Version"  : project.version,
					"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
					"Modloader": "Neoforge",
					"Modloader-Version": project.neo_version,
		])
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
	module {
		downloadSources = true
		downloadJavadoc = true
	}
}